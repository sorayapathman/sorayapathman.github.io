{"ast":null,"code":"var _jsxFileName = \"/Users/sorayapathman/Documents/GitHub/sorayapathman.github.io/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Column from './components/Column';\nimport { useState, useEffect, useContext } from 'react';\nimport PasswordPage from './components/PasswordPage';\nimport sunwolfImage from './sunwolf.png';\nimport { getDatabase, ref, child, get } from \"firebase/database\";\nimport { getAuth, signInWithEmailAndPassword, signOut } from \"firebase/auth\";\nimport firebaseApp from \"./components/Firebase/firebase\";\nimport { AuthContext } from './components/Firebase/Auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // The states for each column\n  const [columnStates, setColumnStates] = useState([{\n    id: 0,\n    color: \"#879F84\",\n    columnClass: \"default\",\n    isActive: false\n  }, {\n    id: 1,\n    color: \"#849F99\",\n    columnClass: \"default\",\n    isActive: false\n  }, {\n    id: 2,\n    color: \"#959F84\",\n    columnClass: \"default\",\n    isActive: false\n  }]);\n  const {\n    currentUser,\n    userData\n  } = useContext(AuthContext);\n  const database = getDatabase(firebaseApp);\n  const [userAuthenticated, setUserAuthenticated] = useState(false);\n  const [passwordEntered, setPasswordEntered] = useState(false);\n  const [user, setUser] = useState(null); // This is only used for the where button class - could maybe be refactored\n\n  const [selectedColumn, setSelectedColumn] = useState(\"-1\");\n  const [whereButtonSize, setWhereButtonSize] = useState(\"small\");\n  const validEmail = \"testing@gmail.com\";\n  const validPassword = \"testing\";\n\n  const clickWhereButton = () => {\n    setWhereButtonSize(\"big\");\n  };\n\n  const authenticateUser = () => {\n    setPasswordEntered(true);\n  };\n\n  const signUserOut = () => {\n    const auth = getAuth();\n    signOut(auth).then(() => {\n      // Sign-out successful.\n      setUserAuthenticated(false);\n      setUser(null);\n    }).catch(error => {// An error happened.\n    });\n  }; // A function to handle what happens when a column is selected\n  // Takes in the column's id, and whether or not it is selected, and changes the width and selection status\n\n\n  const columnSelected = function () {\n    let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let columnIsActive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (columnIsActive) setSelectedColumn(\"-1\");else setSelectedColumn(id.toString()); // Store the current state to ensure no other event changes state in a conflicting manner\n\n    setColumnStates(prevStates => {\n      return prevStates.map(columnState => {\n        if (columnIsActive) {\n          return { ...columnState,\n            columnClass: \"default\",\n            isActive: false\n          };\n        }\n\n        setUserAuthenticated(true);\n        return { ...columnState,\n          columnClass: columnState.id === id ? \"selected\" : \"inactive\",\n          isActive: columnState.id === id ? true : false\n        };\n      });\n    });\n  };\n\n  useEffect(() => {\n    if (currentUser) {\n      setTimeout(function () {\n        //Start the timer\n        setUserAuthenticated(true); //After 0.8 seconds, set authenticate user to true\n\n        setUser(currentUser);\n      }.bind(this), 800);\n    } else {\n      setUserAuthenticated(false);\n      setUser(null);\n    }\n  }, [currentUser]);\n  useEffect(() => {\n    if (whereButtonSize === \"big\") {\n      const timer = 800; //this is to trigger an event at the end of the animation\n\n      setTimeout(function () {\n        //Start the timer\n        //After 0.5 seconds, go to the desired page\n        window.open(\"https://www.google.com/maps/dir//Sunwolf,+70002+Squamish+Valley+Rd,+Brackendale,+BC+V0N+1H0,+Canada/@49.7991028,-123.1582404,735m/data=!3m1!1e3!4m9!4m8!1m0!1m5!1m1!1s0x5486fc20561b4b89:0x4a3b48d94bc47dd9!2m2!1d-123.156415!2d49.799242!3e0\");\n      }.bind(this), timer);\n      setTimeout(function () {\n        //set the map back to its original size, in case they come back to the page\n        setWhereButtonSize(\"small\");\n      }.bind(this), timer + 200);\n    }\n  }, [whereButtonSize]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [columnStates.map(column => /*#__PURE__*/_jsxDEV(Column, {\n      columnState: columnStates[column.id],\n      clickHeader: () => columnSelected(column.id, column.isActive)\n    }, column.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'where-button-' + selectedColumn + whereButtonSize,\n      onClick: clickWhereButton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this), !userAuthenticated && /*#__PURE__*/_jsxDEV(PasswordPage, {\n      authenticateUser: authenticateUser,\n      validEmail: validEmail,\n      validPassword: validPassword\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 32\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"PMbSwECC7BD6swJLxe1YnqHuY2s=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sorayapathman/Documents/GitHub/sorayapathman.github.io/src/App.js"],"names":["Column","useState","useEffect","useContext","PasswordPage","sunwolfImage","getDatabase","ref","child","get","getAuth","signInWithEmailAndPassword","signOut","firebaseApp","AuthContext","App","columnStates","setColumnStates","id","color","columnClass","isActive","currentUser","userData","database","userAuthenticated","setUserAuthenticated","passwordEntered","setPasswordEntered","user","setUser","selectedColumn","setSelectedColumn","whereButtonSize","setWhereButtonSize","validEmail","validPassword","clickWhereButton","authenticateUser","signUserOut","auth","then","catch","error","columnSelected","columnIsActive","toString","prevStates","map","columnState","setTimeout","bind","timer","window","open","column"],"mappings":"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","sourcesContent":["import './App.css';\nimport Column from './components/Column';\nimport { useState, useEffect, useContext } from 'react';\nimport PasswordPage from './components/PasswordPage';\nimport sunwolfImage from './sunwolf.png';\nimport { getDatabase, ref, child, get } from \"firebase/database\";\nimport { getAuth, signInWithEmailAndPassword, signOut } from \"firebase/auth\";\nimport firebaseApp from \"./components/Firebase/firebase\";\n\nimport { AuthContext } from './components/Firebase/Auth'\n\nfunction App() {\n  // The states for each column\n  const [columnStates, setColumnStates] = useState([\n    { id: 0, color: \"#879F84\", columnClass: \"default\", isActive: false },\n    { id: 1, color: \"#849F99\", columnClass: \"default\", isActive: false },\n    { id: 2, color: \"#959F84\", columnClass: \"default\", isActive: false }\n  ]);\n\n  const { currentUser, userData } = useContext(AuthContext);\n\n  const database = getDatabase(firebaseApp);\n\n\n  const [userAuthenticated, setUserAuthenticated] = useState(false);\n  const [passwordEntered, setPasswordEntered] = useState(false);\n\n  const [user, setUser] = useState(null);\n\n  // This is only used for the where button class - could maybe be refactored\n  const [selectedColumn, setSelectedColumn] = useState(\"-1\");\n\n  const [whereButtonSize, setWhereButtonSize] = useState(\"small\");\n\n  const validEmail = \"testing@gmail.com\";\n  const validPassword = \"testing\";\n\n  const clickWhereButton = () => {\n    setWhereButtonSize(\"big\"); \n  }\n\n  const authenticateUser = () => {\n    setPasswordEntered(true);\n  }\n\n  const signUserOut = () => {\n    const auth = getAuth();\n    signOut(auth).then(() => {\n      // Sign-out successful.\n      setUserAuthenticated(false); \n      setUser(null);\n    }).catch((error) => {\n      // An error happened.\n    });\n  }\n\n  // A function to handle what happens when a column is selected\n  // Takes in the column's id, and whether or not it is selected, and changes the width and selection status\n  const columnSelected = (id = 0, columnIsActive = false) => {\n    if(columnIsActive)\n      setSelectedColumn(\"-1\");\n    else\n      setSelectedColumn(id.toString());\n\n    // Store the current state to ensure no other event changes state in a conflicting manner\n    setColumnStates((prevStates) => { \n\n      return prevStates.map((columnState) => {\n        if(columnIsActive){\n          return { \n            ...columnState,\n            columnClass: \"default\",\n            isActive: false\n           }\n          }\n          setUserAuthenticated(true);\n\n          return { \n            ...columnState,\n            columnClass: columnState.id === id ? \"selected\" : \"inactive\",\n            isActive: columnState.id === id ? true: false\n          }\n\n      })\n    })\n  }\n\n  useEffect(()=> {\n    if(currentUser) {\n      setTimeout(function() { //Start the timer\n        setUserAuthenticated(true); //After 0.8 seconds, set authenticate user to true\n        setUser(currentUser)\n      }.bind(this), 800)\n    } else {\n      setUserAuthenticated(false)\n      setUser(null)\n    }\n  }, [\n    currentUser\n  ])\n\n  useEffect(() => {\n    if(whereButtonSize === \"big\"){\n      const timer = 800;\n\n      //this is to trigger an event at the end of the animation\n      setTimeout(function() { //Start the timer\n        //After 0.5 seconds, go to the desired page\n        window.open(\"https://www.google.com/maps/dir//Sunwolf,+70002+Squamish+Valley+Rd,+Brackendale,+BC+V0N+1H0,+Canada/@49.7991028,-123.1582404,735m/data=!3m1!1e3!4m9!4m8!1m0!1m5!1m1!1s0x5486fc20561b4b89:0x4a3b48d94bc47dd9!2m2!1d-123.156415!2d49.799242!3e0\"); \n      }.bind(this), timer)\n\n      setTimeout(function() { //set the map back to its original size, in case they come back to the page\n         setWhereButtonSize(\"small\");\n      }.bind(this), timer + 200)\n      \n    }\n  }, [whereButtonSize])\n\n  return (\n      <div className=\"App\">\n        \n        {columnStates.map((column) => (\n          <Column key={column.id} columnState={columnStates[column.id]} clickHeader={() => columnSelected(column.id, column.isActive)} />))}\n        <div className={'where-button-' + selectedColumn + whereButtonSize} onClick={clickWhereButton}>\n        </div>\n\n        {!userAuthenticated && <PasswordPage authenticateUser={authenticateUser} validEmail={validEmail} validPassword={validPassword} />}        \n          {/* <button onClick={signUserOut}>logout</button> */}\n\n      </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}